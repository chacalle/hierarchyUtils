% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split.R
\name{split_unknown}
\alias{split_unknown}
\title{Split unknown groupings}
\usage{
split_unknown(dt, id_cols, value_cols, col_stem, col_type, mapping)
}
\arguments{
\item{dt}{[\code{data.table()}]\cr
Data which includes both known and unknown groupings. Unknown groupings
should be indicated with NA entries for columns defined by \code{col_stem}.}

\item{id_cols}{[\code{character()}]\cr
ID columns that uniquely identify each row of \code{dt}.}

\item{value_cols}{[\code{character(1)}]\cr
Value columns that should be split and distributed. Currently must be
length 1.}

\item{col_stem}{[\code{character(1)}]\cr
The name of the variable that defines the groupings being split. If an
'interval' variable should not include the '_start' or '_end' suffix.}

\item{col_type}{[\code{character(1)}]\cr
The type of variable that defines the groupings being split. Can be either
'categorical' or 'interval'. Ex: sex is 'categorical' and typically 'age'
is 'interval'.}

\item{mapping}{[\code{character(1)}]\cr
For 'categorical' variables, defines how different levels of the
hierarchical variable relate to each other.}
}
\value{
[\code{data.table()}]\cr
\code{dt} with unknown groupings split across known groupings, and then removed.
}
\description{
Split unknown groupings according to observed proportion
and redistribute.
}
\examples{
# interval
dt <- data.table::data.table(
  age_start = c(0, 1, 2, NA),
  age_end = c(1, 2, 3, NA),
  population = c(20, 30, 50, 10)
)
dt <- split_unknown(
  dt,
  id_cols = c("age_start", "age_end"),
  value_cols = "population",
  col_stem = "age",
  col_type = "interval",
  mapping = data.table::data.table(age_start = c(0), age_end = c(3))
)

# categorical
dt <- data.table::data.table(
  sex = c("male", "female", NA),
  population = c(25, 75, 10)
)
dt <- split_unknown(
  dt,
  id_cols = "sex",
  value_cols = "population",
  col_stem = "sex",
  col_type = "categorical",
  mapping = data.table::data.table(
      parent = c("all", "all"),
      child = c("male", "female")
 )
)

}
