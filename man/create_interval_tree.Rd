% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intervals.R
\name{create_agg_interval_tree}
\alias{create_agg_interval_tree}
\alias{create_scale_interval_tree}
\title{Create a data.tree object to be used for aggregating or scaling
interval data}
\usage{
create_agg_interval_tree(data_intervals_dt, agg_intervals_dt, col_stem)

create_scale_interval_tree(data_intervals_dt, col_stem)
}
\arguments{
\item{data_intervals_dt}{[\code{data.table()}]\cr
Describes each interval present in the data. Includes a column for
\verb{\{col_stem\}_start}, \verb{\{col_stem\}_end}, and \code{col_stem}.}

\item{agg_intervals_dt}{[\code{data.table()}]\cr
Describes each interval that needs to be aggregated to. Includes a column
for \verb{\{col_stem\}_start}, \verb{\{col_stem\}_end}, and \code{col_stem}.}

\item{col_stem}{[\code{character(1)}]\cr
The name of the variable to be aggregated or scaled over. If aggregating an
'interval' variable should not include the '_start' or '_end' suffix.}
}
\value{
[\code{data.tree()}] where the 'name' field of each node is in interval
notation and describes each left-closed, right-open interval. Each node
also includes a field for the 'left' and 'right' endpoint.
}
\description{
Create a data.tree object to be used for aggregating or scaling
interval data
}
\details{
\code{create_agg_interval_tree()} returns a \code{data.tree()} with three levels. The
root node is a place holder that covers the entire data interval. The second
level contains each aggregate node that needs to be made and each of these
aggregate node's have children nodes for the data intervals that are needed
for aggregation.

\code{create_scale_interval_tree()} returns a \code{data.tree()} with a variable number
of levels dependent on the intervals available in the data. The root node
also covers the entire data interval, this node may or may not actually be in
\code{data_intervals_dt}. Each interval in \code{data_intervals_dt} is then positioned
in the tree so that it is a sub-interval of its parent interval node.
}
