% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_age_formatted.R
\name{assert_age_formatted_dt}
\alias{assert_age_formatted_dt}
\alias{identify_age_misformatted_dt}
\title{Are the age related columns formatted correctly?}
\usage{
assert_age_formatted_dt(dt, id_cols, first_age_start = 0,
  terminal_age_end = 125)

identify_age_misformatted_dt(dt, id_cols, first_age_start = 0,
  terminal_age_end = 125)
}
\arguments{
\item{dt}{input data.table to check.
\itemize{
\item must contain columns specified in \code{id_cols}.
\item must include numeric columns called 'age_start' and 'age_end' that contain
no missing values.
\item each combination of \code{id_cols} must uniquely identify each row.
}}

\item{id_cols}{character vector of id columns that uniquely identify each row
of \code{dt}.
\itemize{
\item must include 'age_start' and 'age_end'.
}}

\item{first_age_start}{the numeric 'age_start' value for the first age group.}

\item{terminal_age_end}{the numeric 'age_end' value for the terminal age
group.}
}
\value{
\itemize{
\item \code{identify_age_misformatted_dt} returns a data.table with problematic age
groups only, includes a column 'error' that identifies 'missing' or
'overlapping' age ranges.
\item \code{assert_age_formatted_dt} returns nothing but throws an error if
\code{identify_age_misformatted_dt} returns a non empty data.table.
}
}
\description{
Checks to see that each set of age groups for each combination of the id
columns is formatted correctly. This includes checking that:
\itemize{
\item the age groups are contiguous.
\item there are no overlapping age groups.
\item the youngest age group starts at age \code{first_age_start}.
\item the oldest age group ends at \code{terminal_age_end}.
}
}
\details{
If \code{assert_age_formatted_dt} throws an error indicating the dataset is not
formatted correctly, you can use \code{identify_age_misformatted_dt} to see the rows
of the dataset that are problematic.
}
\examples{
# 5 year age groups with 7-9 age range accidentally included
input_dt <- data.table::data.table(year = 2016,
                                   age_start = seq(0, 95, 5),
                                   age_end = c(seq(5, 95, 5), 125),
                                   value = 1)
temp <- data.table::data.table(year = 2016, age_start = 7, age_end = 9, value = 1)
input_dt <- rbind(input_dt, temp, use.names = T)
id_cols <- c("year", "age_start", "age_end")
misformatted_dt <- identify_age_misformatted_dt(input_dt, id_cols)

\dontrun{
assert_age_formatted_dt(input_dt, id_cols)}

}
