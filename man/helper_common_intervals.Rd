% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interval_collapse.R
\name{identify_common_intervals}
\alias{identify_common_intervals}
\alias{merge_common_intervals}
\title{Helper functions for collapsing to the most detailed common intervals}
\usage{
identify_common_intervals(dt, id_cols, col_stem, include_missing = FALSE)

merge_common_intervals(dt, common_intervals, col_stem)
}
\arguments{
\item{dt}{[\code{data.table()}]\cr
Dataset containing the interval variable.}

\item{id_cols}{[\code{character()}]\cr
ID columns that uniquely identify each row of \code{dt}. If 'NULL' then common
intervals across entire dataset are identified.}

\item{col_stem}{[\code{character(1)}]\cr
The name of the variable to collapse, should not include the '_start' or
'_end' suffix for the interval variable.}

\item{include_missing}{[\code{logical(1)}]\cr
Whether to include missing intervals in the identified most detailed common
intervals. These missing intervals are not present in all combinations of
\code{id_cols}. Default is "FALSE".}

\item{common_intervals}{[\code{data.table()}]\cr
Common intervals returned by \code{\link[=identify_common_intervals]{identify_common_intervals()}}}
}
\value{
\code{\link[=identify_common_intervals]{identify_common_intervals()}} returns a [\code{data.table()}] with two
columns called '{col_stem}_start' and '{col_stem}_end' defining the most
detailed common set of intervals for the \code{col_stem} interval variable.

\code{\link[=identify_common_intervals]{identify_common_intervals()}} returns a [\code{data.table()}] with the
same columns and rows as originally in \code{dt}, with two additional columns
merged on from \code{common_intervals}. These new columns are called
'common_start' and 'common_end' defining the most detailed common interval
each row maps to.
}
\description{
\code{\link[=identify_common_intervals]{identify_common_intervals()}} identifies the most detailed
common set of intervals for a given interval variable and
\code{\link[=merge_common_intervals]{merge_common_intervals()}} merges these on to the original dataset.
\code{\link[=collapse_common_intervals]{collapse_common_intervals()}} calls both these functions internally to
help collapse to the most detailed common intervals.
}
\examples{
id_cols <- c("year_start", "year_end", "sex", "age_start", "age_end")

# set up test input data.table
input_dt_male <- data.table::CJ(year_start = 2005, year_end = 2010,
                                sex = "male",
                                age_start = seq(0, 95, 5),
                                value = 25)
input_dt_male[age_start == 95, value := 5]
input_dt_female <- data.table::CJ(year_start = 2005:2009,
                                  sex = "female",
                                  age_start = seq(0, 95, 1),
                                  value = 1)
gen_end(input_dt_female, setdiff(id_cols, c("year_end", "age_end")),
        col_stem = "year", right_most_endpoint = 2010)
input_dt <- rbind(input_dt_male, input_dt_female)
gen_end(input_dt, setdiff(id_cols, "age_end"), col_stem = "age")
data.table::setkeyv(input_dt, id_cols)

common_intervals <- hierarchyUtils:::identify_common_intervals(
  dt = input_dt,
  id_cols = id_cols,
  col_stem = "year"
)
data.table::setnames(common_intervals, c("year_start", "year_end"),
                     c("common_start", "common_end"))

result_dt <- hierarchyUtils:::merge_common_intervals(
  dt = input_dt,
  common_intervals = common_intervals,
  col_stem = "year"
)

}
