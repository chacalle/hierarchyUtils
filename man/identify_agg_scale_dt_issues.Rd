% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/agg_scale_identify_issues.R
\name{identify_agg_dt_issues}
\alias{identify_agg_dt_issues}
\alias{identify_scale_dt_issues}
\title{Identify issues in the input dataset for aggregation and scaling
functions}
\usage{
identify_agg_dt_issues(
  dt,
  id_cols,
  value_cols,
  col_stem,
  col_type,
  mapping,
  agg_function = sum,
  drop_present_aggs = FALSE
)

identify_scale_dt_issues(
  dt,
  id_cols,
  value_cols,
  col_stem,
  col_type,
  mapping,
  agg_function = sum,
  collapse_missing = FALSE
)
}
\arguments{
\item{dt}{[\code{data.table()}]\cr
Data to be aggregated or scaled.}

\item{id_cols}{[\code{character()}]\cr
ID columns that uniquely identify each row of \code{dt}.}

\item{value_cols}{[\code{character()}]\cr
Value columns that should be aggregated.}

\item{col_stem}{[\code{character(1)}]\cr
The name of the variable to be aggregated or scaled over. If aggregating an
'interval' variable should not include the '_start' or '_end' suffix.}

\item{col_type}{[\code{character(1)}]\cr
The type of variable that is being aggregated or scaled over. Can be either
'categorical' or 'interval'.}

\item{mapping}{[\code{data.table()}]\cr
For 'categorical' variables, defines how different levels of the
hierarchical variable relate to each other. For aggregating 'interval'
variables, it is used to specify intervals to aggregate to, while when
scaling the mapping is inferred from the available intervals in \code{dt}.}

\item{agg_function}{[\verb{function()}]\cr
Function to use when aggregating, can be either \code{sum} (for counts) or
\code{prod} (for probabilities).}

\item{drop_present_aggs}{[\code{logical(1)}]\cr
Whether to drop aggregates (or overlapping intervals) that are already
present in \code{dt} before aggregating. Default is 'False' and the function
errors out.}

\item{collapse_missing}{[\code{logical(1)}]\cr
When scaling a \code{categorical} variable, whether to collapse missing
intermediate levels in \code{mapping}. Default is 'False' and the function
errors out due to missing data.}
}
\value{
[\code{data.table()}] with problematic rows in \code{dt}. Only includes
original \code{id_cols} columns and a new column "issue" describing each row's
issue.
}
\description{
Identify issues in the input dataset for aggregation and scaling
functions
}
\examples{
## Try to aggregate data with a location missing errors out
input_dt <- data.table::CJ(location = iran_mapping[!grepl("[0-9]+", child),
                                                   child],
                           year = 2011, value = 1)
input_dt <- input_dt[location != "Tehran"]
\dontrun{
output_dt <- agg(dt = input_dt,
                 id_cols = c("location", "year"),
                 value_cols = "value",
                 col_stem = "location",
                 col_type = "categorical",
                 mapping = iran_mapping)
}
issues_dt <- identify_agg_dt_issues(dt = input_dt,
                                    id_cols = c("location", "year"),
                                    value_cols = "value",
                                    col_stem = "location",
                                    col_type = "categorical",
                                    mapping = iran_mapping)

## Try to scale data with a location missing errors out
input_dt <- data.table::CJ(location = iran_mapping[!grepl("[0-9]+", child),
                                                   child],
                           year = 2011,
                           value = 1)
input_dt_agg <- data.table::data.table(
  location = "Iran (Islamic Republic of)",
  year = 2011, value = 62
)
input_dt <- rbind(input_dt, input_dt_agg)
\dontrun{
output_dt <- scale(dt = input_dt,
                   id_cols = c("location", "year"),
                   value_cols = "value",
                   col_stem = "location",
                   col_type = "categorical",
                   mapping = iran_mapping,
                   collapse_missing = TRUE)
}
issues_dt <- identify_scale_dt_issues(dt = input_dt,
                                      id_cols = c("location", "year"),
                                      value_cols = "value",
                                      col_stem = "location",
                                      col_type = "categorical",
                                      mapping = iran_mapping,
                                      collapse_missing = TRUE)

}
