% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interval_assertions.R
\name{assert_no_overlapping_intervals_dt}
\alias{assert_no_overlapping_intervals_dt}
\alias{identify_overlapping_intervals_dt}
\title{Check if the interval column in a data.table has overlapping intervals}
\usage{
assert_no_overlapping_intervals_dt(
  dt,
  id_cols,
  col_stem,
  identify_all_possible = FALSE,
  queit = FALSE
)

identify_overlapping_intervals_dt(
  dt,
  id_cols,
  col_stem,
  identify_all_possible = FALSE,
  quiet = FALSE
)
}
\arguments{
\item{dt}{[\code{data.table()}]\cr
Data containing the interval variable to check. Should include all 'id_cols'.}

\item{id_cols}{[\code{character()}]\cr
ID columns that uniquely identify each row of \code{dt}. Should include
'{col_stem}_start' and '{col_stem}_end'.}

\item{col_stem}{[\code{character(1)}]\cr
The name of the interval variable to check, should not include the
'_start' or '_end' suffix.}

\item{identify_all_possible}{[\code{logical(1)}]\cr
Whether to return all overlapping intervals ('TRUE') or try to identify just
the less granular interval ('FALSE'). Default is 'FALSE'. Useful when it may
not be clear what is the less granular interval.}

\item{quiet}{[\code{logical(1)}]\cr
Should progress messages be suppressed as the function is run? Default is
False.}
}
\value{
\code{identify_overlapping_intervals_dt} returns a [\code{data.table()}] with
\code{id_cols} that have overlapping intervals. If no intervals are overlapping
then a zero-row [\code{data.table()}] is returned.
\code{assert_no_overlapping_intervals_dt} returns nothing but throws an error if
\code{identify_overlapping_intervals_dt} returns a non-empty data.table.
}
\description{
Checks to see if the specified interval variable contains
overlapping intervals.
}
\details{
\code{identify_overlapping_intervals_dt} works by first identifying each unique
set of intervals in \code{dt}. Then checks one at at a time the groups of rows
of \code{dt} that match each set of intervals.
}
\examples{
input_dt <- data.table::data.table(
  age_start = seq(0, 95, 5),
  age_end = c(seq(5, 95, 5), Inf)
)
input_dt <- rbind(input_dt, data.table(age_start = c(15), age_end = c(60)))

# identify everything that is overlapping
overlapping_dt <- identify_overlapping_intervals_dt(
  dt = input_dt,
  id_cols = id_cols,
  col_stem = "age",
  identify_all_possible = TRUE
)

# identify only the largest overlapping intervals
overlapping_dt <- identify_overlapping_intervals_dt(
  dt = input_dt,
  id_cols = id_cols,
  col_stem = "age",
  identify_all_possible = FALSE
)

}
